apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql_image
        imagePullPolicy: Never
        ports:
        - containerPort: 3306
          name: mysql
        livenessProbe:
          exec:
            command:
              - sh
              - health.sh
          initialDelaySeconds: 30
          periodSeconds: 10
#Within the container, volumes are mounted at a specific path.
#It's like a symbolic link from the container to the volume within the pod.
        volumeMounts:
        # name must match the volume name (in spec.volumes field)
        - name: mysql-persistent-storage
        # Where to mount this directory in our container
          mountPath: /var/lib/mysql
#volumes in pod is defined in spec.volumes field
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - name: mysqlport
    protocol: TCP
    port: 3306
    targetPort: 3306
  selector:
    app: mysql
  type: ClusterIP
  clusterIP: 10.104.195.124
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  # ReadWriteOnce : the volume can be mounted as read-write by a single node! 
  accessModes:
    - ReadWriteOnce
